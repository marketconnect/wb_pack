package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
	"os"
	"strings"
	"time"
)

// URL API Wildberries
const wildberriesAPI = "https://marketplace-api.wildberries.ru/api/v3/orders/new"

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ Wildberries API
type WildberriesResponse struct {
	Orders []Order `json:"orders"`
}

type Order struct {
	ID        int    `json:"id"`
	Article   string `json:"article"`
	SalePrice int    `json:"salePrice"`
	DDate     string `json:"ddate"`
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
func sendTelegramMessage(message string) {
	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	chatID := os.Getenv("TELEGRAM_CHAT_ID")

	if botToken == "" || chatID == "" {
		log.Println("–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
		return
	}

	apiURL := fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", botToken)
	data := url.Values{}
	data.Set("chat_id", chatID)
	data.Set("text", message)

	resp, err := http.Post(apiURL, "application/x-www-form-urlencoded", strings.NewReader(data.Encode()))
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: %v", err)
		return
	}
	defer resp.Body.Close()

	body, _ := ioutil.ReadAll(resp.Body)
	log.Printf("–û—Ç–≤–µ—Ç Telegram: %s", body)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Wildberries
func checkWildberriesOrders() {
	apiKey := os.Getenv("WB_TOKEN")
	if apiKey == "" {
		log.Println("–û—à–∏–±–∫–∞: WB_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
		return
	}

	client := &http.Client{Timeout: 10 * time.Second}
	req, err := http.NewRequest("GET", wildberriesAPI, nil)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		return
	}

	req.Header.Set("Authorization", apiKey)
	resp, err := client.Do(req)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		return
	}
	defer resp.Body.Close()

	if resp.StatusCode != 200 {
		log.Printf("–û—à–∏–±–∫–∞: API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å %d", resp.StatusCode)
		return
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: %v", err)
		return
	}

	var response WildberriesResponse
	if err := json.Unmarshal(body, &response); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: %v", err)
		return
	}

	if len(response.Orders) > 0 {
		message := "üì¶ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –Ω–∞ Wildberries:\n"
		for _, order := range response.Orders {
			message += fmt.Sprintf("üîπ ID: %d, –ê—Ä—Ç–∏–∫—É–ª: %s, –¶–µ–Ω–∞: %d‚ÇΩ, –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: %s\n",
				order.ID, order.Article, order.SalePrice, order.DDate)
		}
		sendTelegramMessage(message)
	} else {
		log.Println("‚úÖ –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.")
	}
}

// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
func main() {
	for {
		checkWildberriesOrders()
		time.Sleep(1 * time.Minute)
	}
}
