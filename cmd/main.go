package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
	"os"
	"strings"
	"time"
)

// URL API Wildberries
const wildberriesAPI = "https://marketplace-api.wildberries.ru/api/v3/orders/new"

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ Wildberries API
type WildberriesResponse struct {
	Orders []Order `json:"orders"`
}

type Order struct {
	ID        int    `json:"id"`
	Article   string `json:"article"`
	SalePrice int    `json:"salePrice"`
	DDate     string `json:"ddate"`
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
func sendTelegramMessage(message string) {
	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	chatID := os.Getenv("TELEGRAM_CHAT_ID")

	if botToken == "" || chatID == "" {
		log.Println("–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
		return
	}

	apiURL := fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", botToken)
	data := url.Values{}
	data.Set("chat_id", chatID)
	data.Set("text", message)

	resp, err := http.Post(apiURL, "application/x-www-form-urlencoded", strings.NewReader(data.Encode()))
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: %v", err)
		return
	}
	defer resp.Body.Close()

	body, _ := ioutil.ReadAll(resp.Body)
	log.Printf("–û—Ç–≤–µ—Ç Telegram: %s", body)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Wildberries
func checkWildberriesOrders() {
	apiKey := os.Getenv("WB_TOKEN")
	if apiKey == "" {
		log.Println("–û—à–∏–±–∫–∞: WB_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
		return
	}

	client := &http.Client{Timeout: 10 * time.Second}
	req, err := http.NewRequest("GET", wildberriesAPI, nil)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		return
	}

	req.Header.Set("Authorization", apiKey)
	resp, err := client.Do(req)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		return
	}
	defer resp.Body.Close()

	if resp.StatusCode != 200 {
		log.Printf("–û—à–∏–±–∫–∞: API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å %d", resp.StatusCode)
		return
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: %v", err)
		return
	}

	var response WildberriesResponse
	if err := json.Unmarshal(body, &response); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: %v", err)
		return
	}

	if len(response.Orders) > 0 {
		message := "üì¶ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –Ω–∞ Wildberries:\n"
		for _, order := range response.Orders {
			message += fmt.Sprintf("üîπ ID: %d, –ê—Ä—Ç–∏–∫—É–ª: %s, –¶–µ–Ω–∞: %d‚ÇΩ, –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: %s\n",
				order.ID, order.Article, order.SalePrice, order.DDate)
		}
		sendTelegramMessage(message)
	} else {
		log.Println("‚úÖ –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ WB –Ω–µ—Ç.")
	}
}

// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
func main() {
	for {
		checkWildberriesOrders()
		checkOzonOrders()
		time.Sleep(1 * time.Minute)
	}
}

// OZON

// requestBody —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
type requestBody struct {
	Dir    string            `json:"dir"`
	Filter map[string]string `json:"filter"`
	Limit  int               `json:"limit"`
	Offset int               `json:"offset"`
	With   map[string]bool   `json:"with"`
}

// product —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
type product struct {
	Price        string `json:"price"`
	CurrencyCode string `json:"currency_code"`
	OfferID      string `json:"offer_id"`
	Name         string `json:"name"`
	SKU          int    `json:"sku"`
	Quantity     int    `json:"quantity"`
}

// posting —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
type posting struct {
	PostingNumber string    `json:"posting_number"`
	OrderID       int       `json:"order_id"`
	Status        string    `json:"status"`
	Products      []product `json:"products"`
}

// response —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
type response struct {
	Result struct {
		Postings []posting `json:"postings"`
	} `json:"result"`
}

func checkOzonOrders() {
	apiKey := os.Getenv("OZON_API_KEY")
	clientID := os.Getenv("OZON_CLIENT_ID")

	if apiKey == "" || clientID == "" {
		fmt.Println("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è OZON_API_KEY –∏ OZON_CLIENT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
		return
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã: —Å –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è 23:00 –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
	now := time.Now()
	yesterday := now.Add(-24 * time.Hour).Truncate(24 * time.Hour).Add(23 * time.Hour)

	reqBody := requestBody{
		Dir: "ASC",
		Filter: map[string]string{
			"since":  yesterday.Format("2006-01-02T15:04:05Z"), // –í—á–µ—Ä–∞ 23:00
			"to":     now.Format("2006-01-02T15:04:05Z"),       // –°–µ–π—á–∞—Å
			"status": "awaiting_approve",
		},
		Limit:  100,
		Offset: 0,
		With: map[string]bool{
			"analytics_data": true,
			"financial_data": true,
		},
	}

	// –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ JSON
	payload, err := json.Marshal(reqBody)
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à–∞–ª–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö: %v\n", err)
		return
	}

	// –°–æ–∑–¥–∞–µ–º HTTP-–∫–ª–∏–µ–Ω—Ç
	client := &http.Client{Timeout: 10 * time.Second}

	// –°–æ–∑–¥–∞–µ–º HTTP-–∑–∞–ø—Ä–æ—Å
	req, err := http.NewRequest("POST", "https://api-seller.ozon.ru/v3/posting/fbs/list", bytes.NewBuffer(payload))
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: %v\n", err)
		return
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Client-Id", clientID)
	req.Header.Set("Api-Key", apiKey)

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := client.Do(req)
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: %v\n", err)
		return
	}
	defer resp.Body.Close()

	// –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: %v\n", err)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å-–∫–æ–¥
	if resp.StatusCode != http.StatusOK {
		fmt.Printf("–û—à–∏–±–∫–∞: —Å—Ç–∞—Ç—É—Å %d, –æ—Ç–≤–µ—Ç: %s\n", resp.StatusCode, string(body))
		return
	}

	// –†–∞–∑–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç
	var res response
	if err := json.Unmarshal(body, &res); err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞: %v\n", err)
		return
	}
	if len(res.Result.Postings) == 0 {
		log.Println("‚úÖ –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ OZON –Ω–µ—Ç.")
		return
	}
	// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–∞—Ö –∏ –∏—Ö —Ç–æ–≤–∞—Ä–∞—Ö
	for _, posting := range res.Result.Postings {
		message := "üì¶ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –Ω–∞ OZON:\n"

		for _, product := range posting.Products {
			message += fmt.Sprintf("  - –¢–æ–≤–∞—Ä: %s (SKU: %d, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d, –¶–µ–Ω–∞: %s %s, OfferID: %s)\n",
				product.Name, product.SKU, product.Quantity, product.Price, product.CurrencyCode, product.OfferID)
		}
		sendTelegramMessage(message)
	}
}
